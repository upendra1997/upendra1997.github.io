<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Clojure on Blog | Upendra Upadhyay</title>
    <link>https://upendra1997.github.io/tags/clojure/</link>
    <description>Recent content in Clojure on Blog | Upendra Upadhyay</description>
    <image>
      <title>Blog | Upendra Upadhyay</title>
      <url>https://upendra1997.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://upendra1997.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 03 Mar 2024 08:23:31 +0530</lastBuildDate>
    <atom:link href="https://upendra1997.github.io/tags/clojure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Benchmarking Clojure Application</title>
      <link>https://upendra1997.github.io/posts/benchmarking-clojure-application/</link>
      <pubDate>Sun, 03 Mar 2024 08:23:31 +0530</pubDate>
      <guid>https://upendra1997.github.io/posts/benchmarking-clojure-application/</guid>
      <description>snippets to setup benchamrking tests in clojure</description>
      <content:encoded><![CDATA[<p>This is a snippet for benchmarking clojure application which I have used quite often in clojure applications at my job.</p>
<p>First an introduction to the tools:</p>
<ol>
<li><a href="https://clojure-goes-fast.com/kb/profiling/clj-async-profiler/">clj-asyc-profiler</a>: for flamegraphs and call graph.</li>
<li><a href="https://github.com/hugoduncan/criterium/">criterion</a>: for statistically correct benchmarking.</li>
<li><a href="https://github.com/taoensso/tufte">tufte</a>: application level profiling.</li>
</ol>
<p>from this we can keep both #1 and #2 in separate profile just for benchmarking and #3 must be included in the <code>:default</code> profile, otherwise it would defeat its purpose.</p>
<p>below is the code snippet for having these libraries setup in project:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-clojure" data-lang="clojure"><span style="display:flex;"><span>(<span style="color:#66d9ef">defproject </span>clojure-benchmark <span style="color:#e6db74">&#34;0.1.0-SNAPSHOT&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">:description</span> <span style="color:#e6db74">&#34;snippets to setup benchamrking tests in clojure&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">:url</span> <span style="color:#e6db74">&#34;http://example.com/FIXME&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">:license</span> {<span style="color:#e6db74">:name</span> <span style="color:#e6db74">&#34;EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">:url</span> <span style="color:#e6db74">&#34;https://www.eclipse.org/legal/epl-2.0/&#34;</span>}
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">:test-selectors</span> {<span style="color:#e6db74">:default</span> (complement <span style="color:#e6db74">:bench</span>)
</span></span><span style="display:flex;"><span>                   <span style="color:#e6db74">:not</span>     (<span style="color:#66d9ef">fn </span>[m s] (not (contains? m (keyword s))))
</span></span><span style="display:flex;"><span>                   <span style="color:#e6db74">:bench</span>   <span style="color:#e6db74">:bench</span>}
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">:dependencies</span> [[org.clojure/clojure <span style="color:#e6db74">&#34;1.11.1&#34;</span>]
</span></span><span style="display:flex;"><span>                 [com.taoensso/tufte <span style="color:#e6db74">&#34;2.4.5&#34;</span>]]
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">:profiles</span> {<span style="color:#e6db74">:test</span>    [{<span style="color:#e6db74">:dependencies</span> [[org.clojure/test.check <span style="color:#e6db74">&#34;1.1.1&#34;</span>]
</span></span><span style="display:flex;"><span>                                      [criterium <span style="color:#e6db74">&#34;0.4.6&#34;</span>]]}]
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">:bench</span>   [{<span style="color:#e6db74">:test-paths</span>   [<span style="color:#e6db74">&#34;bench&#34;</span>]
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">:global-vars</span>  {*assert* true}
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">:jvm-opts</span>     [<span style="color:#e6db74">&#34;-Djdk.attach.allowAttachSelf&#34;</span>
</span></span><span style="display:flex;"><span>                                       <span style="color:#e6db74">&#34;-XX:+UnlockDiagnosticVMOptions&#34;</span>
</span></span><span style="display:flex;"><span>                                       <span style="color:#e6db74">&#34;-XX:+DebugNonSafepoints&#34;</span>]
</span></span><span style="display:flex;"><span>                        <span style="color:#e6db74">:dependencies</span> [[com.clojure-goes-fast/clj-async-profiler <span style="color:#e6db74">&#34;1.0.4&#34;</span>]]}
</span></span><span style="display:flex;"><span>                       <span style="color:#e6db74">:test</span>]}
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">:repl-options</span> {<span style="color:#e6db74">:init-ns</span> clojure-benchmark.core})
</span></span></code></pre></div><p>important points to note are:</p>
<ol>
<li>We have created a new source locaction called <code>bench</code>, this is added so that all of these overhead of benchmarking is not included in production code, and it can be isolated to run during local run or pipeline run.</li>
<li>There are <code>:test-selectors</code> being added so that we can specifically mark some test to be benchmark tests and run only them using <code>lein with-profile +bench test :bench</code>.</li>
</ol>
<p>The overhead mentioned above will be due to including below functionlities in the code:</p>
<ol>
<li>Runnig flamgraph profiling for the whole duration of the benchmark run.</li>
<li>Making sure that <code>tufte</code> check all the namespaces for gathering the application level metrics.</li>
<li>Making sure that all benchmark are being written to a file.</li>
</ol>
<p>The code for above mentioned functionalities is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-clojure" data-lang="clojure"><span style="display:flex;"><span>(<span style="color:#66d9ef">ns </span>clojure-benchmark.bench
</span></span><span style="display:flex;"><span>  (<span style="color:#e6db74">:require</span>
</span></span><span style="display:flex;"><span>    [clojure.java.io <span style="color:#e6db74">:as</span> io]
</span></span><span style="display:flex;"><span>    [clj-async-profiler.core <span style="color:#e6db74">:as</span> prof]
</span></span><span style="display:flex;"><span>    [taoensso.tufte <span style="color:#e6db74">:as</span> tufte]))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; necessary to print it so that jvm know that we are using its result</span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">def </span>prof-started (<span style="color:#66d9ef">let </span>[start (<span style="color:#a6e22e">atom</span> (<span style="color:#a6e22e">prof/start</span> {}))
</span></span><span style="display:flex;"><span>                        _     (println <span style="color:#e6db74">&#34;profiling started.&#34;</span> (<span style="color:#a6e22e">prof/status</span>))]
</span></span><span style="display:flex;"><span>                       <span style="color:#f92672">@</span>start))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">alter-var-root</span> <span style="color:#f92672">#</span><span style="color:#e6db74">&#39;tufte/*ns-filter*</span> (constantly <span style="color:#e6db74">&#34;*&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; accumulator for tufte result</span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">def </span>stats-accumulator (<span style="color:#a6e22e">tufte/add-accumulating-handler!</span> {<span style="color:#e6db74">:ns-pattern</span> <span style="color:#e6db74">&#34;*&#34;</span>}))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; before exiting make sure that we are printing profiling result</span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">System/setSecurityManager</span>
</span></span><span style="display:flex;"><span>  (proxy [SecurityManager] []
</span></span><span style="display:flex;"><span>         (<span style="color:#a6e22e">checkExit</span> [status]
</span></span><span style="display:flex;"><span>                    (<span style="color:#66d9ef">let </span>[_         (println <span style="color:#e6db74">&#34;profiling ended.&#34;</span> (<span style="color:#a6e22e">prof/status</span>))
</span></span><span style="display:flex;"><span>                          _         (<span style="color:#a6e22e">io/make-parents</span> <span style="color:#e6db74">&#34;profiling-result/random-file&#34;</span>)
</span></span><span style="display:flex;"><span>                          result    (<span style="color:#a6e22e">prof/stop</span>)
</span></span><span style="display:flex;"><span>                          file-name (<span style="color:#a6e22e">.getName</span> result)]
</span></span><span style="display:flex;"><span>                      (<span style="color:#a6e22e">io/make-parents</span> (<span style="color:#a6e22e">format</span> <span style="color:#e6db74">&#34;profiling-result/%s&#34;</span> file-name))
</span></span><span style="display:flex;"><span>                      (<span style="color:#a6e22e">io/copy</span> result (<span style="color:#a6e22e">io/as-file</span> (<span style="color:#a6e22e">format</span> <span style="color:#e6db74">&#34;profiling-result/%s&#34;</span> file-name)))
</span></span><span style="display:flex;"><span>                         (with-open [writer (<span style="color:#a6e22e">io/writer</span> (<span style="color:#a6e22e">format</span> <span style="color:#e6db74">&#34;profiling-result/tufte-prof-%d.txt&#34;</span> (<span style="color:#a6e22e">System/currentTimeMillis</span>)))]
</span></span><span style="display:flex;"><span>                                    (<span style="color:#a6e22e">.write</span> writer (<span style="color:#a6e22e">tufte/format-grouped-pstats</span> <span style="color:#f92672">@</span>stats-accumulator)))))
</span></span><span style="display:flex;"><span>         (<span style="color:#a6e22e">checkCreateClassLoader</span> [<span style="color:#f92672">&amp;</span> args]
</span></span><span style="display:flex;"><span>                                 true)
</span></span><span style="display:flex;"><span>         (<span style="color:#a6e22e">checkPermission</span> [<span style="color:#f92672">&amp;</span> args]
</span></span><span style="display:flex;"><span>                          true)))
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-clojure" data-lang="clojure"><span style="display:flex;"><span>(<span style="color:#66d9ef">ns </span>clojure-benchmark.util
</span></span><span style="display:flex;"><span>  (<span style="color:#e6db74">:require</span> [clojure.java.io <span style="color:#e6db74">:as</span> io]
</span></span><span style="display:flex;"><span>            [clojure.test <span style="color:#e6db74">:refer</span> <span style="color:#e6db74">:all</span>]))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">defn </span>write-to-file [file-name f <span style="color:#f92672">&amp;</span> args]
</span></span><span style="display:flex;"><span>  (<span style="color:#66d9ef">let </span>[file-name (<span style="color:#a6e22e">format</span> <span style="color:#e6db74">&#34;profiling-result/%s&#34;</span> file-name)
</span></span><span style="display:flex;"><span>        _         (<span style="color:#a6e22e">io/make-parents</span> file-name)]
</span></span><span style="display:flex;"><span>    (with-open [file (<span style="color:#a6e22e">io/writer</span> file-name)]
</span></span><span style="display:flex;"><span>      (binding [*out* file]
</span></span><span style="display:flex;"><span>        (apply f args)))))
</span></span></code></pre></div><p>Please check the sample test to understand how to use write the benchmark</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-clojure" data-lang="clojure"><span style="display:flex;"><span>(<span style="color:#66d9ef">ns </span>clojure-benchmark.core-test
</span></span><span style="display:flex;"><span>  (<span style="color:#e6db74">:require</span> [clojure.test <span style="color:#e6db74">:refer</span> <span style="color:#e6db74">:all</span>]
</span></span><span style="display:flex;"><span>            [taoensso.tufte <span style="color:#e6db74">:refer</span> <span style="color:#e6db74">:all</span>]
</span></span><span style="display:flex;"><span>            [criterium.core <span style="color:#e6db74">:refer</span> [benchmark report-result]]
</span></span><span style="display:flex;"><span>            [clojure-benchmark.util <span style="color:#e6db74">:refer</span> [write-to-file]]
</span></span><span style="display:flex;"><span>            [clojure-benchmark.core <span style="color:#e6db74">:refer</span> <span style="color:#e6db74">:all</span>]))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">defn </span>fib [n]
</span></span><span style="display:flex;"><span>  (cond (&lt;= n <span style="color:#ae81ff">0</span>) <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        (= n <span style="color:#ae81ff">1</span>) <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">:else</span> (+ (<span style="color:#a6e22e">fib</span> (- n <span style="color:#ae81ff">1</span>)) (<span style="color:#a6e22e">fib</span> (- n <span style="color:#ae81ff">2</span>)))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">defn </span>noob-fib [n] (<span style="color:#a6e22e">p</span> <span style="color:#e6db74">:noob</span> (<span style="color:#a6e22e">fib</span> n)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">def </span>lazy-fib (lazy-cat [<span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1</span>] (map + lazy-fib (rest lazy-fib))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">defn </span>pro-fib [n]
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">p</span> <span style="color:#e6db74">:pro</span> (nth lazy-fib n)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">deftest</span> a-test
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">testing</span> <span style="color:#e6db74">&#34;test&#34;</span>
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">is</span> (= (<span style="color:#a6e22e">noob-fib</span> <span style="color:#ae81ff">10</span>) <span style="color:#ae81ff">55</span>))
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">is</span> (= (<span style="color:#a6e22e">noob-fib</span> <span style="color:#ae81ff">10</span>) <span style="color:#ae81ff">55</span>))
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">is</span> (= (<span style="color:#a6e22e">pro-fib</span> <span style="color:#ae81ff">13</span>) <span style="color:#ae81ff">233</span>))
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">is</span> (= (<span style="color:#a6e22e">pro-fib</span> <span style="color:#ae81ff">13</span>) <span style="color:#ae81ff">233</span>))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">deftest</span> <span style="color:#f92672">^</span><span style="color:#e6db74">:bench</span> benchmark-fib
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">profile</span> {}
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">let </span>[input    [<span style="color:#ae81ff">10</span> <span style="color:#ae81ff">13</span>]
</span></span><span style="display:flex;"><span>          noob-fib (<span style="color:#a6e22e">benchmark</span> (doseq [inp input] (<span style="color:#a6e22e">noob-fib</span> inp)) {<span style="color:#e6db74">:verbose</span> true <span style="color:#e6db74">:runtime</span> true})
</span></span><span style="display:flex;"><span>          pro-fib  (<span style="color:#a6e22e">benchmark</span> (doseq [inp input] (<span style="color:#a6e22e">pro-fib</span> inp)) {<span style="color:#e6db74">:verbose</span> true <span style="color:#e6db74">:runtime</span> true})]
</span></span><span style="display:flex;"><span>      (<span style="color:#a6e22e">write-to-file</span> <span style="color:#e6db74">&#34;pro-fib.txt&#34;</span> report-result pro-fib <span style="color:#e6db74">:verbose</span> <span style="color:#e6db74">:os</span> <span style="color:#e6db74">:runtime</span>)
</span></span><span style="display:flex;"><span>      (<span style="color:#a6e22e">write-to-file</span> <span style="color:#e6db74">&#34;noob-fib.txt&#34;</span> report-result noob-fib <span style="color:#e6db74">:verbose</span> <span style="color:#e6db74">:os</span> <span style="color:#e6db74">:runtime</span>))))
</span></span></code></pre></div><p>and its output for <code>lein test</code>:</p>
<pre tabindex="0"><code>lein test clojure-benchmark.core-test

Ran 1 tests containing 4 assertions.
0 failures, 0 errors.
</code></pre><p><code>lein with-profile +bench test :bench</code></p>
<pre tabindex="0"><code>profiling started. Profiling is running for 0 seconds

lein test clojure-benchmark.core-test

Ran 1 tests containing 0 assertions.
0 failures, 0 errors.
profiling ended. Profiling is running for 182 seconds

Profiling started
</code></pre><p>output of tufte:</p>
<pre tabindex="0"><code>:tufte/nil-id,
pId                   nCalls        Min      50% ≤      90% ≤      95% ≤      99% ≤        Max       Mean   MAD      Clock  Total

:noob              2,426,660     6.13μs    28.29μs    60.32μs    78.76μs   299.16μs    25.60ms    38.21μs  ±76%     1.55m     52%
:pro              34,272,466   396.00ns   786.00ns     1.24μs     2.29μs     3.17μs   917.90ms     1.04μs  ±59%    35.66s     20%
:tufte/compaction         45    39.54ms   155.80ms   456.94ms   791.48ms     1.52s      1.52s    219.91ms  ±77%     9.90s      6%

Accounted                                                                                                           2.30m     78%
Clock                                                                                                               2.96m    100%
</code></pre><p>output of benchmark:</p>
<pre tabindex="0"><code>[hdggxin@nixos:~/workspace/clojure-benchmark/profiling-result]$ cat noob-fib.txt
amd64 Linux 6.1.51 4 cpu(s)
OpenJDK 64-Bit Server VM 25.362-bga
Runtime arguments: -Dfile.encoding=UTF-8 -Djdk.attach.allowAttachSelf -XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints -Dclojure.compile.path=/
home/hdggxin/workspace/clojure-benchmark/target/classes -Dclojure-benchmark.version=0.1.0-SNAPSHOT -Dclojure.debug=false
Evaluation count : 2773980 in 60 samples of 46233 calls.
      Execution time sample mean : 21.751842 µs
             Execution time mean : 21.807202 µs
Execution time sample std-deviation : 2.868742 µs
    Execution time std-deviation : 2.972753 µs
   Execution time lower quantile : 20.927824 µs ( 2.5%)
   Execution time upper quantile : 25.620445 µs (97.5%)
                   Overhead used : 2.454320 ns

Found 13 outliers in 60 samples (21.6667 %)
        low-severe       4 (6.6667 %)
        low-mild         9 (15.0000 %)
 Variance from outliers : 80.7320 % Variance is severely inflated by outliers

[hdggxin@nixos:~/workspace/clojure-benchmark/profiling-result]$ cat pro-fib.txt
amd64 Linux 6.1.51 4 cpu(s)
OpenJDK 64-Bit Server VM 25.362-bga
Runtime arguments: -Dfile.encoding=UTF-8 -Djdk.attach.allowAttachSelf -XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints -Dclojure.compile.path=/
home/hdggxin/workspace/clojure-benchmark/target/classes -Dclojure-benchmark.version=0.1.0-SNAPSHOT -Dclojure.debug=false
Evaluation count : 34700400 in 60 samples of 578340 calls.
      Execution time sample mean : 1.807223 µs
             Execution time mean : 1.808515 µs
Execution time sample std-deviation : 165.871690 ns
    Execution time std-deviation : 166.917813 ns
   Execution time lower quantile : 1.516781 µs ( 2.5%)
   Execution time upper quantile : 2.079813 µs (97.5%)
                   Overhead used : 2.454320 ns
</code></pre><p>and finally the flamegraph:
<figure class="align-center ">
    <img loading="lazy" src="images/flamegraph.png#center"/> 
</figure>
</p>
<hr>
<p>please check full sample repo here: <a href="https://github.com/upendra1997/clojure-benchmark">https://github.com/upendra1997/clojure-benchmark</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Exploring Resource Directory in Clojure</title>
      <link>https://upendra1997.github.io/posts/exploring-resource-directory-in-clojure/</link>
      <pubDate>Sat, 02 Mar 2024 14:46:06 +0530</pubDate>
      <guid>https://upendra1997.github.io/posts/exploring-resource-directory-in-clojure/</guid>
      <description>looking into clojure macros, java&amp;#39;s jar quirks and fun</description>
      <content:encoded><![CDATA[<p>I was trying to explore the files available in resource directory and read only the .txt files available.</p>
<p>suppose that I have these files in resources:</p>
<pre tabindex="0"><code>resources/
└── hello
    ├── a.txt
    ├── b.txt
    └── c.not-txt
</code></pre><p>and this is the clojure code that I have to read the files:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-clojure" data-lang="clojure"><span style="display:flex;"><span>(<span style="color:#66d9ef">ns </span>jar-resource-read.core
</span></span><span style="display:flex;"><span>  (<span style="color:#e6db74">:require</span> [clojure.java.io <span style="color:#e6db74">:refer</span> [resource file]])
</span></span><span style="display:flex;"><span>  (<span style="color:#e6db74">:gen-class</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">defn </span>read-all-txt-files [] 
</span></span><span style="display:flex;"><span>  (<span style="color:#66d9ef">let </span>[txt-files (<span style="color:#a6e22e">-&gt;&gt;</span> (<span style="color:#a6e22e">resource</span> <span style="color:#e6db74">&#34;hello&#34;</span>)
</span></span><span style="display:flex;"><span>                       (<span style="color:#a6e22e">file</span>)
</span></span><span style="display:flex;"><span>                       (<span style="color:#a6e22e">file-seq</span>)
</span></span><span style="display:flex;"><span>                       (<span style="color:#a6e22e">filter</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">#</span>(-&gt; %1
</span></span><span style="display:flex;"><span>                             (<span style="color:#a6e22e">.getName</span>)
</span></span><span style="display:flex;"><span>                             (<span style="color:#a6e22e">.endsWith</span> <span style="color:#e6db74">&#34;.txt&#34;</span>))))]
</span></span><span style="display:flex;"><span>    (for [f txt-files] 
</span></span><span style="display:flex;"><span>      {<span style="color:#e6db74">:name</span> (<span style="color:#a6e22e">.getName</span> f) 
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">:content</span> (slurp f)})))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#66d9ef">defn </span>-main
</span></span><span style="display:flex;"><span>  [<span style="color:#f92672">&amp;</span> args]
</span></span><span style="display:flex;"><span>  (doseq [{file-name <span style="color:#e6db74">:name</span> content <span style="color:#e6db74">:content</span>} (<span style="color:#a6e22e">read-all-txt-files</span>)]
</span></span><span style="display:flex;"><span>    (println (<span style="color:#a6e22e">format</span> <span style="color:#e6db74">&#34;%s:&#34;</span> file-name))
</span></span><span style="display:flex;"><span>    (println content)
</span></span><span style="display:flex;"><span>    (println <span style="color:#e6db74">&#34;---------------&#34;</span>)))
</span></span></code></pre></div><p>and running <code>lein run</code> actually returns the correct result:</p>
<pre tabindex="0"><code>b.txt:
hello

---------------
a.txt:
hi

---------------
</code></pre><p>but when I try to creat a jar using <code>lein uberjar</code> and run the jar <code>java -jar target/uberjar/jar-resource-read-0.1.0-SNAPSHOT-standalone.jar</code>, but this is the error that I got:</p>
<pre tabindex="0"><code>Exception in thread &#34;main&#34; java.lang.IllegalArgumentException: Not a file: jar:file:/home/hdggxin/workspace/jar-resource-read/target/uberjar/jar-resource-read-0.1.0-SNAPSHOT-standalone.jar!/hello
        at clojure.java.io$fn__11513.invokeStatic(io.clj:61)
        at clojure.java.io$fn__11513.invoke(io.clj:44)
        at clojure.java.io$fn__11487$G__11469__11492.invoke(io.clj:35)
        at clojure.java.io$file.invokeStatic(io.clj:424)
        at jar_resource_read.core$read_all_txt_files.invokeStatic(core.clj:5)
        at jar_resource_read.core$_main.invokeStatic(core.clj:16)
        at jar_resource_read.core$_main.doInvoke(core.clj:16)
        at clojure.lang.RestFn.invoke(RestFn.java:397)
        at clojure.lang.AFn.applyToHelper(AFn.java:152)
        at clojure.lang.RestFn.applyTo(RestFn.java:132)
        at jar_resource_read.core.main(Unknown Source)
</code></pre><p>further looking into it, found that there are two main reasons for these errors:</p>
<ol>
<li><code>jar</code> is a compressed file.</li>
<li><code>file-seq</code> requires a file as argument.</li>
</ol>
<p>so basically <code>file-seq</code> cannot iterate over a location in compressed archive, i.e. <code>jar:file:/home/hdggxin/workspace/jar-resource-read/target/uberjar/jar-resource-read-0.1.0-SNAPSHOT-standalone.jar!/hello</code></p>
<p>We can uncompress the jar during the program startup and iterate over the extracted location, but this will make program not run through <code>lein</code>, so finally decided to read the file during the compile time and put the object in <code>jar</code>.</p>
<p>which can be done using:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-clojure" data-lang="clojure"><span style="display:flex;"><span>(<span style="color:#66d9ef">defmacro </span>all-txt-files []
</span></span><span style="display:flex;"><span>  (into [] (<span style="color:#a6e22e">read-all-txt-files</span>)))
</span></span></code></pre></div><p>and then using this macro we can change the main function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-clojure" data-lang="clojure"><span style="display:flex;"><span>(<span style="color:#66d9ef">defn </span>-main
</span></span><span style="display:flex;"><span>  [<span style="color:#f92672">&amp;</span> args]
</span></span><span style="display:flex;"><span>  (doseq [{file-name <span style="color:#e6db74">:name</span> content <span style="color:#e6db74">:content</span>} (<span style="color:#a6e22e">all-txt-files</span>)]
</span></span><span style="display:flex;"><span>    (println (<span style="color:#a6e22e">format</span> <span style="color:#e6db74">&#34;%s:&#34;</span> file-name))
</span></span><span style="display:flex;"><span>    (println content)
</span></span><span style="display:flex;"><span>    (println <span style="color:#e6db74">&#34;---------------&#34;</span>)))
</span></span></code></pre></div><h2 id="this-obviously-solves-the-issue-and-we-get-the-same-output-using-the-jar-files-also-">This obviously solves the issue and we get the same output using the jar files also :)</h2>
<p>Please check the full code <a href="https://github.com/upendra1997/jar-resource-read">here</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Nim Clojure Similarity</title>
      <link>https://upendra1997.github.io/posts/nim-clojure-similarity/</link>
      <pubDate>Sat, 26 Nov 2022 11:13:56 +0530</pubDate>
      <guid>https://upendra1997.github.io/posts/nim-clojure-similarity/</guid>
      <description>How Nim can help learn Systems Programming</description>
      <content:encoded><![CDATA[<p>Hello world, I am Upendra Upadhyay. This is my first post and I have been trying to write for a long time. I think there is no better time than now.</p>
<p>I have been trying to learn <a href="https://www.haskell.org/">Haskell</a> for past 3 years in my free time, but was never able to code anything useful; mostly did fibonacci, sieve of eratosthenes, and sudoku - which was taking lot of memory and time because of bad pruning.</p>
<h3 id="fibonacci">Fibonacci</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">fib</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">:</span><span style="color:#ae81ff">1</span><span style="color:#66d9ef">:</span>zipWith (<span style="color:#f92672">+</span>) fib (tail fib)
</span></span></code></pre></div><pre tabindex="0"><code>ghci&gt; take 10 fib
[0,1,1,2,3,5,8,13,21,34]
</code></pre><h3 id="sieve-of-eratosthenes">Sieve of eratosthenes</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-haskell" data-lang="haskell"><span style="display:flex;"><span><span style="color:#a6e22e">sieve</span> (p<span style="color:#66d9ef">:</span>ps) <span style="color:#f92672">=</span> p<span style="color:#66d9ef">:</span>sieve (filter (<span style="color:#a6e22e">\</span>x <span style="color:#f92672">-&gt;</span> x `mod` p <span style="color:#f92672">/=</span> <span style="color:#ae81ff">0</span>) ps)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">prime</span> <span style="color:#f92672">=</span> sieve [<span style="color:#ae81ff">2</span><span style="color:#f92672">..</span>]
</span></span></code></pre></div><pre tabindex="0"><code>ghci&gt; take 10 prime
[2,3,5,7,11,13,17,19,23,29]
</code></pre><hr>
<p>All things considered, I was never able to be productive in Haskell, But I got opportunity to work in <a href="https://clojure.org/">Clojure</a>; which allowed me to write functional code and interop with Java/Javascript. It created a bridge to Haskell, which have great ideas with steep learning curve.</p>
<p>Similar case is with <a href="https://www.rust-lang.org/">Rust</a>, I am still trying to solve <a href="https://exercism.org/tracks/rust/exercises/xorcism">Xorcism</a> , never seem to be getting closer to solution. I think Rust have great ideas but also a bit of learning curve. This where I think <a href="https://nim-lang.org/">Nim</a> can become similar bridge like Clojure for Rust. It allows system programming and interop with C, C++, Javascript.</p>
<p>which makes me curious to learn Nim.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
